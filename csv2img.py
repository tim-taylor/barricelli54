#! /usr/bin/env python3
#
# csv2img.py
# A utility script to take a csv file generated by the barricelli54 program
# and generate an PNG image in the style used in Barricelli's 1954 paper.
#
# usage:
# > ./csv2img.py [-b] <input_csv_file>
# where the optional -b flag specifies that grid lines are to be drawn
#
# Program written by ChatGPT and Tim Taylor
# July 2025

import csv
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import sys
import os

def read_csv_to_array(file_path):
    """Reads a CSV file of numerical values or 'x' into a 2D list."""
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        data = []
        for row in reader:
            processed_row = []
            for item in row:
                item = item.strip().lower()
                if item == 'x':
                    processed_row.append('x')
                else:
                    try:
                        processed_row.append(int(item))
                    except ValueError:
                        processed_row.append(0)  # Default to 0 if parsing fails
            data.append(processed_row)
    return data

def draw_grid(data, output_path, draw_borders=False):
    """Draws a compact grid with bold numbers or 'x' from the 2D list and saves it as an image."""
    rows = len(data)
    cols = len(data[0]) if rows > 0 else 0

    fig, ax = plt.subplots(figsize=(cols * 0.125, rows * 0.125), dpi=300)

    ax.set_xlim(0, cols)
    ax.set_ylim(0, rows)
    ax.axis('off')

    # Invert y-axis to have the first row at the top
    ax.invert_yaxis()

    for y in range(rows):
        for x in range(cols):
            value = data[y][x]

            if draw_borders:
                rect = patches.Rectangle((x, y), 1, 1, linewidth=0.25, edgecolor='black', facecolor='none')
                ax.add_patch(rect)

            if value == 0:
                continue  # Leave the cell content empty, but border will still be drawn if requested

            if value == 'x':
                display_text = 'x'
                ax.text(x + 0.5, y + 0.5, display_text,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)
            elif value < 0:
                num_str = str(abs(int(value)))
                ax.text(x + 0.5, y + 0.5, num_str,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)
                text_width = 0.4 * len(num_str)
                ax.plot([x + 0.5 - text_width / 2, x + 0.5 + text_width / 2], [y + 0.9, y + 0.9],
                        linewidth=1, color='black')
            else:
                display_text = str(int(value))
                ax.text(x + 0.5, y + 0.5, display_text,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)

    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    plt.savefig(output_path, bbox_inches='tight', pad_inches=0)
    plt.close()


def print_usage_and_exit():
    print("Usage: csv2img.py [-b] <input_csv_file>")
    sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_usage_and_exit()

    draw_borders = False
    if sys.argv[1] == '-b':
        draw_borders = True
        if len(sys.argv) < 3:
            print_usage_and_exit()
        input_csv = sys.argv[2]
    else:
        input_csv = sys.argv[1]

    output_image = os.path.splitext(os.path.basename(input_csv))[0] + ".png"

    data = read_csv_to_array(input_csv)
    draw_grid(data, output_image, draw_borders)

    print(f"Image saved as {output_image}")
