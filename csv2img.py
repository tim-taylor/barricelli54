#! /usr/bin/env python3
#
# csv2img.py
# A utility script to take a csv file generated by the barricelli54 program
# and generate an PNG image in the style used in Barricelli's 1954 paper.
#
# usage:
# > ./csv2img.py [-b] <input_csv_file> [label_specs...]
# where the optional -b flag specifies that grid lines are to be drawn
# and label_specs are of the form: <above|below>:<start_col>:<end_col>:<label_text>
#
# Program written by ChatGPT and Tim Taylor
# July 2025

import csv
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import sys
import os
import matplotlib.patheffects as path_effects


def read_csv_to_array(file_path):
    """Reads a CSV file of numerical values or 'x' into a 2D list."""
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        data = []
        for row in reader:
            processed_row = []
            for item in row:
                item = item.strip().lower()
                if item == 'x':
                    processed_row.append('x')
                else:
                    try:
                        processed_row.append(int(item))
                    except ValueError:
                        processed_row.append(0)
            data.append(processed_row)
    return data

def draw_bracket(ax, start, end, row_y, above=True, label=""):
    """Draw a simple horizontal bracket line with caps and a label above or below."""
    mid = (start + end) / 2
    label_y = row_y + (-0.45 if above else 0.45)
    cap_height = 0.15 if above else -0.15

    # Straight horizontal line
    ax.plot([start, end], [row_y, row_y], color='black', linewidth=0.8)

    # Caps at each end
    ax.plot([start, start], [row_y, row_y + cap_height], color='black', linewidth=0.8)
    ax.plot([end, end], [row_y, row_y + cap_height], color='black', linewidth=0.8)

    # Label
    ax.text(mid, label_y, label, ha='center', va='center', fontsize=6, fontweight='bold')

def draw_grid(data, output_path, draw_borders=False, labels=[]):
    rows = len(data)
    cols = len(data[0]) if rows > 0 else 0
    fig_height = rows * 0.125 + (0.4 if len(labels) > 0 else 0.0)
    fig, ax = plt.subplots(figsize=(cols * 0.125, fig_height), dpi=300)

    # set margins around the fig (larger margins if there are labels to be displayed)
    ax.set_xlim(-0.25, cols + 0.25)
    if len(labels) == 0:
        ax.set_ylim(-0.25, rows + 0.25)
    else:
        ax.set_ylim(-1.25, rows + 1.25)

    ax.axis('off')
    ax.invert_yaxis()

    for y in range(rows):
        for x in range(cols):
            value = data[y][x]

            if draw_borders:
                rect = patches.Rectangle((x, y), 1, 1, linewidth=0.25, edgecolor='black', facecolor='none')
                ax.add_patch(rect)

            if value == 0:
                continue

            if value == 'x':
                display_text = 'x'
                ax.text(x + 0.5, y + 0.5, display_text,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)
            elif value < 0:
                num_str = str(abs(int(value)))
                ax.text(x + 0.5, y + 0.5, num_str,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)
                text_width = 0.4 * len(num_str)
                ax.plot([x + 0.5 - text_width / 2, x + 0.5 + text_width / 2], [y + 0.9, y + 0.9],
                        linewidth=1, color='black')
            else:
                display_text = str(int(value))
                ax.text(x + 0.5, y + 0.5, display_text,
                        ha='center', va='center', fontsize=6, fontweight='bold', clip_on=True)

    for label in labels:
        position, start, end, text = label
        start, end = int(start), int(end)
        if position == 'above':
            draw_bracket(ax, start, end, -0.2, above=True, label=text)
        elif position == 'below':
            draw_bracket(ax, start, end, rows + 0.35, above=False, label=text)

    plt.subplots_adjust(left=0, right=1, top=1, bottom=0)
    plt.savefig(output_path, bbox_inches='tight', pad_inches=0)
    plt.close()

def print_usage_and_exit():
    print("Usage: csv2img.py [-b] <input_csv_file> [label_specs...]")
    print("label_specs format: above|below:<start_col>:<end_col>:<label_text>")
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_usage_and_exit()

    draw_borders = False
    arg_index = 1
    if sys.argv[arg_index] == '-b':
        draw_borders = True
        arg_index += 1

    if arg_index >= len(sys.argv):
        print_usage_and_exit()

    input_csv = sys.argv[arg_index]
    arg_index += 1
    label_specs = sys.argv[arg_index:]

    labels = []
    for spec in label_specs:
        try:
            position, start, end, text = spec.split(':', 3)
            if position not in ('above', 'below'):
                raise ValueError
            labels.append((position, start, end, text))
        except ValueError:
            print(f"Invalid label specification: {spec}")
            print_usage_and_exit()

    output_image = os.path.splitext(os.path.basename(input_csv))[0] + ".png"

    data = read_csv_to_array(input_csv)
    draw_grid(data, output_image, draw_borders, labels)

    print(f"Image saved as {output_image}")
